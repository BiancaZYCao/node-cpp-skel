language: node_js

sudo: false

# build options and AWS keys for publishing binaries
# note: you'll need to generate your own keys for publishing a separate project
env:
  global:
    - secure: "c6x3wJRHUDTFawKuGzuwGOPCiMBPGreIc3og2tD0oOAc0lzwDf+RB5f97LBj27wOkzSUc/t1f7XOf6ACF8qdxEny6fEMUL81lsiBIuWR4v46pC2HPSJyOFHFpKeMo+gFR6jmo2lWk05503LVR9SIhqYsu7vaBSjnzr7MhOnpO6i1xqqzY/GOiPJ8oTRPH/6kZdSZE/T+fhZ2hZWX/CYarKRFyDGYPTTkm+PL/8BngNceoH8CcMZW/2MjI2vd3NK86AXCoWkgQJ9Rb56vcmPU9Wv1QS/oNE3c1+i//CMFQ0SaDLVMML24SVGAnqJ+Xjw5oDwzLSrVTDANlIyfTC55kUBClpA8VUGPTWA+PAjRgYeATXcbwwCH6TT4m6zzc3dVCI/9HZvnMS0Tc7aJ3vd15ITpLH5qX8j46tVJoUzAcViR6G4wTk+A2+GgivSr5P+G3pzRMeGNAac5z+/Kwo5DRvJe+MN5DDmU9sXDTrI8TrDxd6QA7B8QNKDLcPO6uYOjTq3vGHeO3GIaFrlmQ1H8546LeMgU7uSdcvL3futNK+fJ0Vu64h6NVQ3iNNGhucjKQmmVr4W3jlEdmxKpbRY6SaverKmw3qQhs3xY8Td61wO6/q2p7cvLuW71mKJZxsdablZRN6j+IB8G7ew++kz80b4v8alIgmRmoqfhZdFNuww="
    - secure: "s5TG+slvtY/bM2iByROWh/xZu1evYkmQj4SJMWfGiuhnes33UceqVU94HhmxM4IglXIklvmxfMsXZPOe4Chdtm4kpRdOPZ2b1AqH5bMS2ilWVNQxVzAUH8/P3+5RHC7I6GRqApZZfc3SVX8tJfc8Oa/wXn7H8+kEYfOeLNNUmcvabG5th3jVsdvBz9MZMW12hYGdjMHxn3rK/ZQAIWvuNdmLESTUDvzXsA0sP9SqF8vMMsaGzembcPr4gEdKnaNHSZFPt4lu/SOIAG5SroTXIri1FPAYS/8IYBJNJtP2m9xd9n3RUGvOXVL5hUg470Ik4h/fIIVhseY9CszPwOeQHk1r9pqOrohWfNHw48IxG6/7iUMepmjO6tzhdibJ4Fp4L59O3Ti/Iw2w+rmc5i9UZvBAbTS6NGtFUikKD9HPVw7F9oC1ZWeFyUGD0Jpk6c7Lg3MZPmIyrbpwrPPNLq/OelRb0qMA5zdaxZN3uUM2H1QjGim6dQpvQ2FN6i82yKa8faDzcKCZivUfFCvpYju+YFnMWZGIwv7rFa98EgMKryE86oq4vwNTXgQa5v8vwJ53/lcQalCvToTJ0sOJXuf2nx9VU82hdy/pjgOLYiT9Ozt+glQp0GBGfoJvWMblrtqK7FR/6/2XNsu9vjU/pB57+H+YzhwcOg68NRkerxtEjFo="

# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# run tests
# We use before_script rather than script to ensure fast failure (the script section continues even after an error)
# https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
before_script:
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# override script default (npm test) to do nothing (we test in before_script)
script:
  - true

# the matrix allows you to specify different operating systems and environments to 
# run your tests and build binaries
matrix:
  include:
    # linux publishable node v4/release
    - os: linux
      env: BUILDTYPE=release
      node_js: 4
    # linux publishable node v4/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 4
    # linux publishable node v6
    - os: linux
      env: BUILDTYPE=release
      node_js: 6
    # linux publishable node v6/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 6
    # osx publishable node v4
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 4
    # osx publishable node v6
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 6
    # Sanitizer build node v4/Debug
    - os: linux
      env: BUILDTYPE=debug TOOLSET=asan
      node_js: 4
      # Overrides `install` to set up custom asan flags
      install:
        - ./scripts/setup.sh --config local.env
        # put mason and clang++ on PATH
        - source local.env
        # Note: to build without stopping on errors remove the -fno-sanitize-recover=all flag
        # You might want to do this if there are multiple errors and you want to see them all before fixing
        - export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
        - export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
        - make ${BUILDTYPE}
      # Overrides `script` to disable asan LD_PRELOAD before publishing
      before_script:
        - export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
        - export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
        - npm test
        - unset LD_PRELOAD
        # after successful tests, publish binaries if specified in commit message
        - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")
    # g++ build (default builds all use clang++)
    - os: linux
      env: BUILDTYPE=debug CXX="g++-6" CC="gcc-6"
      node_js: 4
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-6-dev
            - g++-6
      # Overrides `install` to avoid initializing clang toolchain
      install:
        - make ${BUILDTYPE}
      # Overrides `script` to disable publishing
      before_script:
        - npm test
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 4
      # Overrides `script` to publish coverage data to codecov
      before_script:
        - npm test
        - mason install llvm-cov ${MASON_LLVM_RELEASE}
        - mason link llvm-cov ${MASON_LLVM_RELEASE}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
